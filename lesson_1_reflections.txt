I could see the differences in the file and from that see a version where there wasn't an error and quickly compare likely error candidates.

Q: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

A: you can see common errors you make and compare against them. You can see the original way you've organized or your go to scripting organization and think of ways to conciously make it better. Seeing old states helps to run old mememories and you can use your current knowledge with that context to relect and try new things. 


Q: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

A: 
	pro
		- easier to navigate long histories with small logical changes. Particularly when dealing with multiple contributors.
		- allows the master branch to test and accept changes from multiple users. See what could break the app
		

	con
		- decision to do commits can be a little arbitrary and may not be saved as often as needed, may not be conisistent
		- may lose essential changes for contributors that don't change when they need to

a commit is a snapshot of all the files in your repository at the time you decide to make the commit


Q: Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?


A: not all changse involve interconnected files. While it might make sense for coding where one logical file calls from another its a little different for others where the project might be contained in one file. It can add complications to track multiple files where it might be easier/simpler to navigate changes in one file for one project. 

Q: How can you use the commands git log and git diff to view the history of files?


A: git log will show the entire git commit history of a repository and git diff can show you what changed in two individul instances of that repo. Remember you can use the first four letters of an id instead of copy pasting the whole id

git checkout: checking out a git is returning the version of your files to the time the commit was made


Q: How might using version control make you more confident to make changes that could break something?

A: you can easily navigate through different versions of a project in order to see where the bug was introduced. Easy logical checkpoints and if you make experimental changes that break something you can always navigate to a version where that didn't happen

Q: Now that you have your workspace set up, what do you want to try using Git for?

A: I want to try and use git for some of the more iterative projects that I do daily as well as integrating it into my daily routine. I have several projects where just navigating the file control takes an hour and I want to cut down on that


